/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type GameOutcomeStruct = {
  gid: BigNumberish;
  cardA: BigNumberish;
  cardB: BigNumberish;
  winner: AddressLike;
  outcome: BigNumberish;
};

export type GameOutcomeStructOutput = [
  gid: bigint,
  cardA: bigint,
  cardB: bigint,
  winner: string,
  outcome: bigint
] & {
  gid: bigint;
  cardA: bigint;
  cardB: bigint;
  winner: string;
  outcome: bigint;
};

export type PermissionStruct = { publicKey: BytesLike; signature: BytesLike };

export type PermissionStructOutput = [publicKey: string, signature: string] & {
  publicKey: string;
  signature: string;
};

export interface FHEKuhnPokerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptGame"
      | "chips"
      | "createGame"
      | "dealMeIn"
      | "eip712Domain"
      | "games"
      | "getGameCard"
      | "gid"
      | "owner"
      | "performAction"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChipTaken"
      | "EIP712DomainChanged"
      | "GameAccepted"
      | "GameCreated"
      | "PerformedGameAction"
      | "PlayerDealtIn"
      | "WonByFold"
      | "WonByShowdown"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "chips", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dealMeIn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getGameCard",
    values: [PermissionStruct, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gid", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performAction",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "acceptGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chips", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dealMeIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performAction",
    data: BytesLike
  ): Result;
}

export namespace ChipTakenEvent {
  export type InputTuple = [player: AddressLike, gid: BigNumberish];
  export type OutputTuple = [player: string, gid: bigint];
  export interface OutputObject {
    player: string;
    gid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameAcceptedEvent {
  export type InputTuple = [playerB: AddressLike, gid: BigNumberish];
  export type OutputTuple = [playerB: string, gid: bigint];
  export interface OutputObject {
    playerB: string;
    gid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameCreatedEvent {
  export type InputTuple = [
    playerA: AddressLike,
    playerB: AddressLike,
    gid: BigNumberish
  ];
  export type OutputTuple = [playerA: string, playerB: string, gid: bigint];
  export interface OutputObject {
    playerA: string;
    playerB: string;
    gid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PerformedGameActionEvent {
  export type InputTuple = [
    player: AddressLike,
    gid: BigNumberish,
    action: BigNumberish
  ];
  export type OutputTuple = [player: string, gid: bigint, action: bigint];
  export interface OutputObject {
    player: string;
    gid: bigint;
    action: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerDealtInEvent {
  export type InputTuple = [user: AddressLike, chips: BigNumberish];
  export type OutputTuple = [user: string, chips: bigint];
  export interface OutputObject {
    user: string;
    chips: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WonByFoldEvent {
  export type InputTuple = [
    winner: AddressLike,
    gid: BigNumberish,
    pot: BigNumberish
  ];
  export type OutputTuple = [winner: string, gid: bigint, pot: bigint];
  export interface OutputObject {
    winner: string;
    gid: bigint;
    pot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WonByShowdownEvent {
  export type InputTuple = [
    winner: AddressLike,
    gid: BigNumberish,
    pot: BigNumberish
  ];
  export type OutputTuple = [winner: string, gid: bigint, pot: bigint];
  export interface OutputObject {
    winner: string;
    gid: bigint;
    pot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FHEKuhnPoker extends BaseContract {
  connect(runner?: ContractRunner | null): FHEKuhnPoker;
  waitForDeployment(): Promise<this>;

  interface: FHEKuhnPokerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptGame: TypedContractMethod<[_gid: BigNumberish], [void], "nonpayable">;

  chips: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  createGame: TypedContractMethod<[playerB: AddressLike], [void], "nonpayable">;

  dealMeIn: TypedContractMethod<
    [chipCount: BigNumberish],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  games: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        GameOutcomeStructOutput
      ] & {
        gid: bigint;
        playerA: string;
        playerB: string;
        accepted: boolean;
        pot: bigint;
        startingPlayer: bigint;
        eCardA: bigint;
        eCardB: bigint;
        action1: bigint;
        action2: bigint;
        action3: bigint;
        outcome: GameOutcomeStructOutput;
      }
    ],
    "view"
  >;

  getGameCard: TypedContractMethod<
    [permission: PermissionStruct, _gid: BigNumberish],
    [string],
    "view"
  >;

  gid: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  performAction: TypedContractMethod<
    [_gid: BigNumberish, action: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptGame"
  ): TypedContractMethod<[_gid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "chips"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "createGame"
  ): TypedContractMethod<[playerB: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dealMeIn"
  ): TypedContractMethod<[chipCount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "games"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        GameOutcomeStructOutput
      ] & {
        gid: bigint;
        playerA: string;
        playerB: string;
        accepted: boolean;
        pot: bigint;
        startingPlayer: bigint;
        eCardA: bigint;
        eCardB: bigint;
        action1: bigint;
        action2: bigint;
        action3: bigint;
        outcome: GameOutcomeStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGameCard"
  ): TypedContractMethod<
    [permission: PermissionStruct, _gid: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "gid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "performAction"
  ): TypedContractMethod<
    [_gid: BigNumberish, action: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ChipTaken"
  ): TypedContractEvent<
    ChipTakenEvent.InputTuple,
    ChipTakenEvent.OutputTuple,
    ChipTakenEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "GameAccepted"
  ): TypedContractEvent<
    GameAcceptedEvent.InputTuple,
    GameAcceptedEvent.OutputTuple,
    GameAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "GameCreated"
  ): TypedContractEvent<
    GameCreatedEvent.InputTuple,
    GameCreatedEvent.OutputTuple,
    GameCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PerformedGameAction"
  ): TypedContractEvent<
    PerformedGameActionEvent.InputTuple,
    PerformedGameActionEvent.OutputTuple,
    PerformedGameActionEvent.OutputObject
  >;
  getEvent(
    key: "PlayerDealtIn"
  ): TypedContractEvent<
    PlayerDealtInEvent.InputTuple,
    PlayerDealtInEvent.OutputTuple,
    PlayerDealtInEvent.OutputObject
  >;
  getEvent(
    key: "WonByFold"
  ): TypedContractEvent<
    WonByFoldEvent.InputTuple,
    WonByFoldEvent.OutputTuple,
    WonByFoldEvent.OutputObject
  >;
  getEvent(
    key: "WonByShowdown"
  ): TypedContractEvent<
    WonByShowdownEvent.InputTuple,
    WonByShowdownEvent.OutputTuple,
    WonByShowdownEvent.OutputObject
  >;

  filters: {
    "ChipTaken(address,uint256)": TypedContractEvent<
      ChipTakenEvent.InputTuple,
      ChipTakenEvent.OutputTuple,
      ChipTakenEvent.OutputObject
    >;
    ChipTaken: TypedContractEvent<
      ChipTakenEvent.InputTuple,
      ChipTakenEvent.OutputTuple,
      ChipTakenEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "GameAccepted(address,uint256)": TypedContractEvent<
      GameAcceptedEvent.InputTuple,
      GameAcceptedEvent.OutputTuple,
      GameAcceptedEvent.OutputObject
    >;
    GameAccepted: TypedContractEvent<
      GameAcceptedEvent.InputTuple,
      GameAcceptedEvent.OutputTuple,
      GameAcceptedEvent.OutputObject
    >;

    "GameCreated(address,address,uint256)": TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
    GameCreated: TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;

    "PerformedGameAction(address,uint256,uint8)": TypedContractEvent<
      PerformedGameActionEvent.InputTuple,
      PerformedGameActionEvent.OutputTuple,
      PerformedGameActionEvent.OutputObject
    >;
    PerformedGameAction: TypedContractEvent<
      PerformedGameActionEvent.InputTuple,
      PerformedGameActionEvent.OutputTuple,
      PerformedGameActionEvent.OutputObject
    >;

    "PlayerDealtIn(address,uint256)": TypedContractEvent<
      PlayerDealtInEvent.InputTuple,
      PlayerDealtInEvent.OutputTuple,
      PlayerDealtInEvent.OutputObject
    >;
    PlayerDealtIn: TypedContractEvent<
      PlayerDealtInEvent.InputTuple,
      PlayerDealtInEvent.OutputTuple,
      PlayerDealtInEvent.OutputObject
    >;

    "WonByFold(address,uint256,uint256)": TypedContractEvent<
      WonByFoldEvent.InputTuple,
      WonByFoldEvent.OutputTuple,
      WonByFoldEvent.OutputObject
    >;
    WonByFold: TypedContractEvent<
      WonByFoldEvent.InputTuple,
      WonByFoldEvent.OutputTuple,
      WonByFoldEvent.OutputObject
    >;

    "WonByShowdown(address,uint256,uint256)": TypedContractEvent<
      WonByShowdownEvent.InputTuple,
      WonByShowdownEvent.OutputTuple,
      WonByShowdownEvent.OutputObject
    >;
    WonByShowdown: TypedContractEvent<
      WonByShowdownEvent.InputTuple,
      WonByShowdownEvent.OutputTuple,
      WonByShowdownEvent.OutputObject
    >;
  };
}
