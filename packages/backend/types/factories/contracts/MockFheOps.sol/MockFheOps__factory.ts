/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockFheOps,
  MockFheOpsInterface,
} from "../../../contracts/MockFheOps.sol/MockFheOps";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "add",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "and",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "value",
        type: "bool",
      },
    ],
    name: "boolToBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "uint8",
        name: "toType",
        type: "uint8",
      },
    ],
    name: "cast",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "decrypt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "div",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "eq",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int32",
        name: "",
        type: "int32",
      },
    ],
    name: "getNetworkPublicKey",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "gt",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "gte",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "s",
        type: "string",
      },
    ],
    name: "log",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "lt",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "lte",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "max",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
    ],
    name: "maxValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "min",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "mul",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "ne",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "not",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "or",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        internalType: "int32",
        name: "",
        type: "int32",
      },
    ],
    name: "random",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "rem",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
    ],
    name: "req",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "ctHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "sealOutput",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "controlHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "ifTrueHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "ifFalseHash",
        type: "bytes",
      },
    ],
    name: "select",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "shl",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "shr",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "sub",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "uint8",
        name: "toType",
        type: "uint8",
      },
      {
        internalType: "int32",
        name: "",
        type: "int32",
      },
    ],
    name: "trivialEncrypt",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "uint256ToBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "int32",
        name: "",
        type: "int32",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "xor",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50613226806100206000396000f3fe608060405234801561001057600080fd5b50600436106101ef5760003560e01c8063874b1c101161010f578063b9c7a54b116100a2578063cc2cbeff11610071578063cc2cbeff14610720578063d260d9ab14610750578063eb274b7714610780578063eb376804146107b0576101ef565b8063b9c7a54b14610660578063ba19ac2814610690578063c2d96952146106c0578063c7559da4146106f0576101ef565b8063aa626e8a116100de578063aa626e8a146105a0578063ae104cfd146105d0578063ae42450a14610600578063b8fa104314610630576101ef565b8063874b1c10146104e057806392348b34146105105780639944d12d14610540578063a1848ff314610570576101ef565b80634a5a111711610187578063650de1cf11610156578063650de1cf1461042057806372d456f5146104505780637c4697ab146104805780637d23f1db146104b0576101ef565b80634a5a1117146103605780635211c6791461039057806355e5e6c5146103c05780635e639f19146103f0576101ef565b80631f4cda2f116101c35780631f4cda2f146102b457806321b50ba3146102e457806341304fac146103145780634284f76514610330576101ef565b80622df619146101f45780630b80518e1461022457806313c0c9ae146102545780631b1b484e14610284575b600080fd5b61020e60048036038101906102099190612645565b6107e0565b60405161021b919061274f565b60405180910390f35b61023e60048036038101906102399190612645565b61088c565b60405161024b919061274f565b60405180910390f35b61026e60048036038101906102699190612645565b6109c9565b60405161027b919061274f565b60405180910390f35b61029e600480360381019061029991906127aa565b610a80565b6040516102ab919061274f565b60405180910390f35b6102ce60048036038101906102c99190612645565b610b0c565b6040516102db919061274f565b60405180910390f35b6102fe60048036038101906102f991906127d7565b610bb8565b60405161030b919061274f565b60405180910390f35b61032e600480360381019061032991906128e7565b610c00565b005b61034a60048036038101906103459190612645565b610c17565b604051610357919061274f565b60405180910390f35b61037a60048036038101906103759190612930565b610cc3565b604051610387919061274f565b60405180910390f35b6103aa60048036038101906103a59190612645565b610d4b565b6040516103b7919061274f565b60405180910390f35b6103da60048036038101906103d5919061299f565b610e88565b6040516103e791906129e5565b60405180910390f35b61040a60048036038101906104059190612645565b611317565b604051610417919061274f565b60405180910390f35b61043a60048036038101906104359190612645565b6113aa565b604051610447919061274f565b60405180910390f35b61046a60048036038101906104659190612645565b611461565b604051610477919061274f565b60405180910390f35b61049a60048036038101906104959190612a2c565b6114f4565b6040516104a791906129e5565b60405180910390f35b6104ca60048036038101906104c59190612a9b565b611572565b6040516104d7919061274f565b60405180910390f35b6104fa60048036038101906104f59190612645565b6115b9565b604051610507919061274f565b60405180910390f35b61052a60048036038101906105259190612645565b61166f565b604051610537919061274f565b60405180910390f35b61055a60048036038101906105559190612645565b611725565b604051610567919061274f565b60405180910390f35b61058a60048036038101906105859190612645565b611812565b6040516105979190612b4c565b60405180910390f35b6105ba60048036038101906105b59190612bae565b61185a565b6040516105c7919061274f565b60405180910390f35b6105ea60048036038101906105e59190612645565b6118e6565b6040516105f7919061274f565b60405180910390f35b61061a60048036038101906106159190612645565b611979565b604051610627919061274f565b60405180910390f35b61064a60048036038101906106459190612c39565b611a66565b604051610657919061274f565b60405180910390f35b61067a60048036038101906106759190612645565b611c3b565b604051610687919061274f565b60405180910390f35b6106aa60048036038101906106a59190612c66565b611cf1565b6040516106b7919061274f565b60405180910390f35b6106da60048036038101906106d59190612cd5565b611d4b565b6040516106e7919061274f565b60405180910390f35b61070a60048036038101906107059190612d90565b611e3e565b604051610717919061274f565b60405180910390f35b61073a60048036038101906107359190612645565b611f19565b604051610747919061274f565b60405180910390f35b61076a60048036038101906107659190612a9b565b611fc5565b604051610777919061274f565b60405180910390f35b61079a60048036038101906107959190612645565b61204d565b6040516107a7919061274f565b60405180910390f35b6107ca60048036038101906107c59190612645565b612104565b6040516107d7919061274f565b60405180910390f35b60606107f6671a6550598676ea9b60c01b6121b0565b61080a6716c154af9f0e34d260c01b6121b0565b61081e67f849d7562fafcba060c01b6121b0565b600061082985610e88565b610832846121b3565b61083b866121b3565b6108459190612dec565b61084f9190612e4f565b905061086567573f9be3f968fdcb60c01b6121b0565b61087967d05e557e5cf8937560c01b6121b0565b61088281611e3e565b9150509392505050565b60606108a26759564758ec78a96660c01b6121b0565b6108b667dfe3c8ccebb0ee2360c01b6121b0565b6108ca67aa24b485c389611460c01b6121b0565b60006108d585610e88565b6108de846121b3565b6108e89190612e4f565b6108f186610e88565b6108fa866121b3565b6109049190612e4f565b1015905061091c6726b1c5d8b56f41fc60c01b6121b0565b6109306719fc9cce49d3251f60c01b6121b0565b60011515811515036109815761095067e48691de54a0806460c01b6121b0565b610964672728049a2b7045d960c01b6121b0565b610978677bbb19438c53597e60c01b6121b0565b839150506109c2565b61099567f3730c5f40fdf62b60c01b6121b0565b6109a967fc629c953ed054c560c01b6121b0565b6109bd67dd114dc8297b46f860c01b6121b0565b829150505b9392505050565b60606109df67231479f92b9798ed60c01b6121b0565b6109f3672682264a5d3e5af360c01b6121b0565b610a0767c1498bcb34e9ea7860c01b6121b0565b6000610a1285610e88565b610a1b846121b3565b610a259190612e4f565b610a2e86610e88565b610a37866121b3565b610a419190612e4f565b14159050610a5967bade521aead1e4a360c01b6121b0565b610a6d67cfd7c0deaa10cd9760c01b6121b0565b610a7681611a66565b9150509392505050565b6060610a96677c2b61683f87b41760c01b6121b0565b610aaa6760d8dd6978f7c25460c01b6121b0565b610abe67c69c58db5e041c3c60c01b6121b0565b60006040518060800160405280604181526020016131b0604191399050610aef67d06ba1cd3955cb7560c01b6121b0565b610b03672bad2bc5d924ca9760c01b6121b0565b80915050919050565b6060610b226712bf059f5e410edf60c01b6121b0565b610b3667219566df5b91a51d60c01b6121b0565b610b4a67a258da8608d9d70a60c01b6121b0565b6000610b5585610e88565b610b5e846121b3565b610b67866121b3565b610b719190612e80565b610b7b9190612e4f565b9050610b91678e8d64783484845660c01b6121b0565b610ba5671c5085c874ac1a4860c01b6121b0565b610bae81611e3e565b9150509392505050565b6060610bce674595c92f0140698060c01b6121b0565b610be2678268527a45bd700360c01b6121b0565b610bf667c63266a445bbd74a60c01b6121b0565b8290509392505050565b610c1467afc0dcf40d7ca26960c01b6121b0565b50565b6060610c2d671461722d9ea6ba5b60c01b6121b0565b610c4167af139f3c72e5a4a860c01b6121b0565b610c55678db2fedc00fc4e0360c01b6121b0565b6000610c6085610e88565b610c69846121b3565b610c72866121b3565b610c7c9190612eb1565b610c869190612e4f565b9050610c9c6777ba92521a9e636a60c01b6121b0565b610cb06707e9e2748be6611160c01b6121b0565b610cb981611e3e565b9150509392505050565b6060610cd9676e83b48ea31be8ad60c01b6121b0565b610ced670d7f64d5bad82d7d60c01b6121b0565b610d01670876eaa895168d5d60c01b6121b0565b600083610d0d90612f2f565b9050610d2367e1f85e1b8bfc767360c01b6121b0565b610d3767a41298a3c86f650760c01b6121b0565b610d41818461231b565b9150509392505050565b6060610d6167c1ea549dce339a5a60c01b6121b0565b610d756749a12b1801c779eb60c01b6121b0565b610d8967ac9c991adf69869760c01b6121b0565b6000610d9485610e88565b610d9d846121b3565b610da79190612e4f565b610db086610e88565b610db9866121b3565b610dc39190612e4f565b10159050610ddb67e6df044a20c72d0f60c01b6121b0565b610def679115065eb4f156c960c01b6121b0565b6001151581151503610e4057610e0f67f4d62b512f30d3c160c01b6121b0565b610e2367ae2f594c13e589b860c01b6121b0565b610e376757623ae3a2ce88f760c01b6121b0565b82915050610e81565b610e5467aad4eaf74cee275e60c01b6121b0565b610e68675aa04a2eb929fb5060c01b6121b0565b610e7c67719d544a4104492a60c01b6121b0565b839150505b9392505050565b6000610e9e675d0d177903eb017660c01b6121b0565b610eb267e458a25452d05c8260c01b6121b0565b610ec667027eefc040c5e44260c01b6121b0565b6000610edc67c50dc3673936c1c860c01b6121b0565b610ef06723a3cae3067315fe60c01b6121b0565b60008360ff1603610f3a57610f0f675f3da3523b64409f60c01b6121b0565b610f236741db6525aaa4566260c01b6121b0565b600160ff8016610f339190612dec565b90506112e6565b610f4e679d39047d6393150460c01b6121b0565b610f6267c89a1b0f0c0881a860c01b6121b0565b60018360ff1603610fad57610f81679182a25dbdcc4ef160c01b6121b0565b610f9567c6e7682a72d6793960c01b6121b0565b600161ffff8016610fa69190612dec565b90506112e5565b610fc167dc4a58b9a6d8fe0c60c01b6121b0565b610fd567f010678a04c875cd60c01b6121b0565b60028360ff160361102157610ff3665c1e07cae286f560c01b6121b0565b61100767885e6582d1424da960c01b6121b0565b600163ffffffff801661101a9190612dec565b90506112e4565b611035672da1cd36d4ba1cab60c01b6121b0565b611049673965fd7415cc045f60c01b6121b0565b60038360ff160361109a5761106867fc30845c4bfbfa8560c01b6121b0565b61107c675127f362cb6d6b4360c01b6121b0565b600167ffffffffffffffff80166110939190612dec565b90506112e3565b6110ae677c7bad4bdbd44e9b60c01b6121b0565b6110c2679e68d80b063dc22b60c01b6121b0565b60048360ff160361111b576110e1679db5e4d50f3ac51160c01b6121b0565b6110f5678cff061377ac8c4960c01b6121b0565b60016fffffffffffffffffffffffffffffffff80166111149190612dec565b90506112e2565b61112f6725fa1288cdcc3c1460c01b6121b0565b6111436730ffd9e98272961b60c01b6121b0565b60058360ff160361117f5761116267c74e86d395359a9160c01b6121b0565b6111766766841478c684b43c60c01b6121b0565b600190506112e1565b6111936751f575063bc94d6c60c01b6121b0565b6111a767e1e559b87110556160c01b6121b0565b600c8360ff1603611204576111c66788de0a12fbea98f060c01b6121b0565b6111da67922c120dccd52bae60c01b6121b0565b600173ffffffffffffffffffffffffffffffffffffffff80166111fd9190612dec565b90506112e0565b6112186716187d80e90d440a60c01b6121b0565b61122c67eea32e75f95a2c4060c01b6121b0565b600d8360ff16036112685761124b67928a26dc88b1d3a460c01b6121b0565b61125f671eddd2ea87825b9c60c01b6121b0565b600190506112df565b61127c6780e09b06d8fe0e0f60c01b6121b0565b61129067a4b2c96a66ff010160c01b6121b0565b6112a467abc12df7b871ee2f60c01b6121b0565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d690612fe2565b60405180910390fd5b5b5b5b5b5b5b5b6112fa6777d0f668a5aabe2460c01b6121b0565b61130e677a23c40c962d633560c01b6121b0565b80915050919050565b606061132d6731fe5b547ca2742960c01b6121b0565b6113416796dfac25beb563c960c01b6121b0565b611355674ff2333b9971a1e860c01b6121b0565b60008261136190612f2f565b8461136b90612f2f565b189050611382678e37933dc07c14af60c01b6121b0565b611396671513eb602ae5f82860c01b6121b0565b6113a0818661231b565b9150509392505050565b60606113c067b4e73be74e2b2fc360c01b6121b0565b6113d467f087eb2cd745cf4860c01b6121b0565b6113e8676381403a3b711b9d60c01b6121b0565b60006113f385610e88565b6113fc846121b3565b6114069190612e4f565b61140f86610e88565b611418866121b3565b6114229190612e4f565b1015905061143a672927a681e7f44fff60c01b6121b0565b61144e67af14c052616d0b6260c01b6121b0565b61145781611a66565b9150509392505050565b6060611477670d446120f81ccfdd60c01b6121b0565b61148b67f87164ce38921a2460c01b6121b0565b61149f67e5127470df237c7460c01b6121b0565b6000826114ab90612f2f565b846114b590612f2f565b1790506114cc6709c7424ee12e937160c01b6121b0565b6114e067bfcdc265d31e893f60c01b6121b0565b6114ea818661231b565b9150509392505050565b600061150a67c59cf99681d6f5cb60c01b6121b0565b61151e67b036173f0347870960c01b6121b0565b61153267ade069fe993b208860c01b6121b0565b600061153d846121b3565b90506115536783092117ee2a835a60c01b6121b0565b61156767cc2a7afc161122c260c01b6121b0565b809150509392505050565b606061158867cde60c47f12ac7a360c01b6121b0565b61159c679db1b22690c66b4b60c01b6121b0565b6115b0677cd6fbffdfa2f42d60c01b6121b0565b81905092915050565b60606115cf67d1c6c472fa849b2660c01b6121b0565b6115e367c5c93e367788930d60c01b6121b0565b6115f76722f1239774dee93f60c01b6121b0565b600061160285610e88565b61160b846121b3565b6116159190612e4f565b61161e86610e88565b611627866121b3565b6116319190612e4f565b11905061164867da39e0aceaa6311f60c01b6121b0565b61165c675f39c13bffedf80660c01b6121b0565b61166581611a66565b9150509392505050565b6060611685676797c2ddf30a0ade60c01b6121b0565b611699672e7ee74e8b60ba6360c01b6121b0565b6116ad67ded6b46dd53470bf60c01b6121b0565b60006116b885610e88565b6116c1846121b3565b6116cb9190612e4f565b6116d486610e88565b6116dd866121b3565b6116e79190612e4f565b1490506116fe679c982a4c44144d0960c01b6121b0565b61171267b047acc61b346da360c01b6121b0565b61171b81611a66565b9150509392505050565b606061173b673ac72796dc19588260c01b6121b0565b61174f673ea60849c84d906760c01b6121b0565b61176367e2d67fe3f3bedb9a60c01b6121b0565b600061176e846121b3565b905061178467170b7173fcd6ce2060c01b6121b0565b61179867c79053bd4d7ee87b60c01b6121b0565b60006117a3846121b3565b90506117b9679a27d7168cc08cb460c01b6121b0565b6117cd67c22cd466bfe79e6d60c01b6121b0565b60008183901c90506117e967814f56ba767ebec260c01b6121b0565b6117fd67a903877590a2645160c01b6121b0565b61180681611e3e565b93505050509392505050565b606061182867a1aaaf3a04fc8a2e60c01b6121b0565b61183c6771af1c9681edd10860c01b6121b0565b61185067606d372ddb33160860c01b6121b0565b8290509392505050565b6060611870679350c5a914c7704c60c01b6121b0565b61188467f0c3ab653eb81fb460c01b6121b0565b61189867902260815819fb7b60c01b6121b0565b6118dd6118a485610e88565b426040516020016118b591906129e5565b6040516020818303038152906040528051906020012060001c6118d89190612e4f565b611e3e565b90509392505050565b60606118fc67cc5fe4434f4897ac60c01b6121b0565b611910677334520af7295fd260c01b6121b0565b61192467d0b22ac396e78b1160c01b6121b0565b60008261193090612f2f565b8461193a90612f2f565b16905061195167dd2471b296e0024260c01b6121b0565b61196567e825b0c60e5552a760c01b6121b0565b61196f818661231b565b9150509392505050565b606061198f67ad59bf8cbf3574a360c01b6121b0565b6119a367f74b64d08789c48e60c01b6121b0565b6119b7670d694ff1ead1be6f60c01b6121b0565b60006119c2846121b3565b90506119d86708082df8204a3ca660c01b6121b0565b6119ec67624bf49723fc9d4b60c01b6121b0565b60006119f7846121b3565b9050611a0d673a9232f168bb039760c01b6121b0565b611a2167a999ff96e96184cc60c01b6121b0565b60008183901b9050611a3d67d1ac209e47b6d03560c01b6121b0565b611a5167517a19a320d4be8360c01b6121b0565b611a5a81611e3e565b93505050509392505050565b6060611a7c67187f6b06e8e78fbd60c01b6121b0565b611a9067afc2841f12c1e3bc60c01b6121b0565b611aa467b64a57790ce9055d60c01b6121b0565b6000600167ffffffffffffffff811115611ac157611ac061251a565b5b6040519080825280601f01601f191660200182016040528015611af35781602001600182028036833780820191505090505b509050611b0a67672d0b4511bb994860c01b6121b0565b611b1e6723aca5d200d7469a60c01b6121b0565b8215611b9957611b3867f34e630a95cec57960c01b6121b0565b611b4c67accd80dc066c437e60c01b6121b0565b600160f81b81600081518110611b6557611b64613002565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611c0a565b611bad6798db59127a8be4f160c01b6121b0565b611bc167e60b44604266d76d60c01b6121b0565b600060f81b81600081518110611bda57611bd9613002565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b611c1e679e441d358616917b60c01b6121b0565b611c3267ff2b401144807e5860c01b6121b0565b80915050919050565b6060611c51677938ba292ca2434060c01b6121b0565b611c656750385e6f4ad0597360c01b6121b0565b611c7967357509ea63b3a43960c01b6121b0565b6000611c8485610e88565b611c8d846121b3565b611c979190612e4f565b611ca086610e88565b611ca9866121b3565b611cb39190612e4f565b109050611cca67d1dfbefc73555dd960c01b6121b0565b611cde67e951b987cdac83d160c01b6121b0565b611ce781611a66565b9150509392505050565b6060611d07677840504108a42abf60c01b6121b0565b611d1b677dfbdd04867baae560c01b6121b0565b611d2f67355ca351bf35df7260c01b6121b0565b611d4284611d3c90612f2f565b8461231b565b90509392505050565b6060611d61678dac41a4374a5ffc60c01b6121b0565b611d7567a1474b1d5d96e3d260c01b6121b0565b611d8967588977989d0d665f60c01b6121b0565b6000611d9485612381565b9050611daa6753ae64f942a0eb6360c01b6121b0565b611dbe67039235966d23ca3860c01b6121b0565b8015611df557611dd8673ae748678ea1c37460c01b6121b0565b611dec6734cceedcebc1c01360c01b6121b0565b83915050611e36565b611e0967545a89ef9433d9d560c01b6121b0565b611e1d67f686e1325862d8a560c01b6121b0565b611e31674ee7319c195ecb5060c01b6121b0565b829150505b949350505050565b6060611e546733401f92b84da53660c01b6121b0565b611e686770f6b4876227a53d60c01b6121b0565b611e7c676b232902793fdf2d60c01b6121b0565b6000602067ffffffffffffffff811115611e9957611e9861251a565b5b6040519080825280601f01601f191660200182016040528015611ecb5781602001600182028036833780820191505090505b509050611ee2675b6826cf1bfbaaa860c01b6121b0565b826020820152611efc67eb696cf3f2ac43a860c01b6121b0565b611f1067c50de39761a8d54e60c01b6121b0565b80915050919050565b6060611f2f67176af624130cec6f60c01b6121b0565b611f436772f2480efd57f6ed60c01b6121b0565b611f57679df693ff8496532b60c01b6121b0565b6000611f6285610e88565b611f6b846121b3565b611f74866121b3565b611f7e9190613031565b611f889190612e4f565b9050611f9e6713c92985c585665160c01b6121b0565b611fb267efe2583832fe838c60c01b6121b0565b611fbb81611e3e565b9150509392505050565b6060611fdb679d1400e9488068b760c01b6121b0565b611fef67b04d88502985c01f60c01b6121b0565b61200367318aaf9513c4659560c01b6121b0565b60008261200f90612f2f565b199050612026670dc345330497e44c60c01b6121b0565b61203a67525e4601d9dcbbf060c01b6121b0565b612044818561231b565b91505092915050565b606061206367e664b7b160fa229960c01b6121b0565b6120776780008deaf09fc0a560c01b6121b0565b61208b679fa085b53d17af9c60c01b6121b0565b600061209685610e88565b61209f846121b3565b6120a99190612e4f565b6120b286610e88565b6120bb866121b3565b6120c59190612e4f565b111590506120dd675eca71e76ed640d360c01b6121b0565b6120f1673d24f7ec03454d0260c01b6121b0565b6120fa81611a66565b9150509392505050565b606061211a67963233debb885e7160c01b6121b0565b61212e6740d51aa2d4b25bac60c01b6121b0565b61214267053049d27f6496ce60c01b6121b0565b600061214d85610e88565b612156846121b3565b61215f866121b3565b6121699190612e4f565b6121739190612e4f565b9050612189674c553502759e784260c01b6121b0565b61219d6756ad15c143c7083460c01b6121b0565b6121a681611e3e565b9150509392505050565b50565b60006121c96796b922539081e12260c01b6121b0565b6121dd6736d8f63d7249ffbb60c01b6121b0565b6121f167fcb4176384492efa60c01b6121b0565b61220567080326d444d0226e60c01b6121b0565b60208251111561224a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612241906130b1565b60405180910390fd5b61225e6748677f1705bd870360c01b6121b0565b6122726706c34ca2109acdd560c01b6121b0565b6122866738680a3ab30b16ef60c01b6121b0565b815160206122949190613031565b67ffffffffffffffff8111156122ad576122ac61251a565b5b6040519080825280601f01601f1916602001820160405280156122df5781602001600182028036833780820191505090505b50826040516020016122f292919061310d565b6040516020818303038152906040528060200190518101906123149190613146565b9050919050565b606061233167951910aaa3757ef460c01b6121b0565b612345674b583ad842644c9860c01b6121b0565b612359670607e0f7dbdf4c8f60c01b6121b0565b8260405160200161236a9190613194565b604051602081830303815290604052905092915050565b6000612397677e038cebee918f8c60c01b6121b0565b6123ab67d58992ba93ea21da60c01b6121b0565b6123bf67b4cba2f009c1bd0260c01b6121b0565b6123d367dd01d6a79b6d707660c01b6121b0565b602082511115612418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240f906130b1565b60405180910390fd5b61242c676776aed3b5351cb260c01b6121b0565b61244067276348e2e7b9647560c01b6121b0565b61245467232e83e59b450d7560c01b6121b0565b60008260008151811061246a57612469613002565b5b602001015160f81c60f81b60f81c905061248e67c25127c381ab2b9760c01b6121b0565b6124a267c49df628bc1b78f360c01b6121b0565b60008160ff161415915050919050565b6000604051905090565b600080fd5b600080fd5b600060ff82169050919050565b6124dc816124c6565b81146124e757600080fd5b50565b6000813590506124f9816124d3565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61255282612509565b810181811067ffffffffffffffff821117156125715761257061251a565b5b80604052505050565b60006125846124b2565b90506125908282612549565b919050565b600067ffffffffffffffff8211156125b0576125af61251a565b5b6125b982612509565b9050602081019050919050565b82818337600083830152505050565b60006125e86125e384612595565b61257a565b90508281526020810184848401111561260457612603612504565b5b61260f8482856125c6565b509392505050565b600082601f83011261262c5761262b6124ff565b5b813561263c8482602086016125d5565b91505092915050565b60008060006060848603121561265e5761265d6124bc565b5b600061266c868287016124ea565b935050602084013567ffffffffffffffff81111561268d5761268c6124c1565b5b61269986828701612617565b925050604084013567ffffffffffffffff8111156126ba576126b96124c1565b5b6126c686828701612617565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b8381101561270a5780820151818401526020810190506126ef565b60008484015250505050565b6000612721826126d0565b61272b81856126db565b935061273b8185602086016126ec565b61274481612509565b840191505092915050565b600060208201905081810360008301526127698184612716565b905092915050565b60008160030b9050919050565b61278781612771565b811461279257600080fd5b50565b6000813590506127a48161277e565b92915050565b6000602082840312156127c0576127bf6124bc565b5b60006127ce84828501612795565b91505092915050565b6000806000606084860312156127f0576127ef6124bc565b5b60006127fe868287016124ea565b935050602084013567ffffffffffffffff81111561281f5761281e6124c1565b5b61282b86828701612617565b925050604061283c86828701612795565b9150509250925092565b600067ffffffffffffffff8211156128615761286061251a565b5b61286a82612509565b9050602081019050919050565b600061288a61288584612846565b61257a565b9050828152602081018484840111156128a6576128a5612504565b5b6128b18482856125c6565b509392505050565b600082601f8301126128ce576128cd6124ff565b5b81356128de848260208601612877565b91505092915050565b6000602082840312156128fd576128fc6124bc565b5b600082013567ffffffffffffffff81111561291b5761291a6124c1565b5b612927848285016128b9565b91505092915050565b600080600060608486031215612949576129486124bc565b5b6000612957868287016124ea565b935050602084013567ffffffffffffffff811115612978576129776124c1565b5b61298486828701612617565b9250506040612995868287016124ea565b9150509250925092565b6000602082840312156129b5576129b46124bc565b5b60006129c3848285016124ea565b91505092915050565b6000819050919050565b6129df816129cc565b82525050565b60006020820190506129fa60008301846129d6565b92915050565b612a09816129cc565b8114612a1457600080fd5b50565b600081359050612a2681612a00565b92915050565b600080600060608486031215612a4557612a446124bc565b5b6000612a53868287016124ea565b935050602084013567ffffffffffffffff811115612a7457612a736124c1565b5b612a8086828701612617565b9250506040612a9186828701612a17565b9150509250925092565b60008060408385031215612ab257612ab16124bc565b5b6000612ac0858286016124ea565b925050602083013567ffffffffffffffff811115612ae157612ae06124c1565b5b612aed85828601612617565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000612b1e82612af7565b612b288185612b02565b9350612b388185602086016126ec565b612b4181612509565b840191505092915050565b60006020820190508181036000830152612b668184612b13565b905092915050565b600067ffffffffffffffff82169050919050565b612b8b81612b6e565b8114612b9657600080fd5b50565b600081359050612ba881612b82565b92915050565b600080600060608486031215612bc757612bc66124bc565b5b6000612bd5868287016124ea565b9350506020612be686828701612b99565b9250506040612bf786828701612795565b9150509250925092565b60008115159050919050565b612c1681612c01565b8114612c2157600080fd5b50565b600081359050612c3381612c0d565b92915050565b600060208284031215612c4f57612c4e6124bc565b5b6000612c5d84828501612c24565b91505092915050565b600080600060608486031215612c7f57612c7e6124bc565b5b600084013567ffffffffffffffff811115612c9d57612c9c6124c1565b5b612ca986828701612617565b9350506020612cba868287016124ea565b9250506040612ccb86828701612795565b9150509250925092565b60008060008060808587031215612cef57612cee6124bc565b5b6000612cfd878288016124ea565b945050602085013567ffffffffffffffff811115612d1e57612d1d6124c1565b5b612d2a87828801612617565b935050604085013567ffffffffffffffff811115612d4b57612d4a6124c1565b5b612d5787828801612617565b925050606085013567ffffffffffffffff811115612d7857612d776124c1565b5b612d8487828801612617565b91505092959194509250565b600060208284031215612da657612da56124bc565b5b6000612db484828501612a17565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612df7826129cc565b9150612e02836129cc565b9250828201905080821115612e1a57612e19612dbd565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612e5a826129cc565b9150612e65836129cc565b925082612e7557612e74612e20565b5b828206905092915050565b6000612e8b826129cc565b9150612e96836129cc565b925082612ea657612ea5612e20565b5b828204905092915050565b6000612ebc826129cc565b9150612ec7836129cc565b9250828202612ed5816129cc565b91508282048414831517612eec57612eeb612dbd565b5b5092915050565b6000819050602082019050919050565b6000819050919050565b6000612f198251612f03565b80915050919050565b600082821b905092915050565b6000612f3a826126d0565b82612f4484612ef3565b9050612f4f81612f0d565b92506020821015612f8f57612f8a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802612f22565b831692505b5050919050565b7f556e737570706f72746564207479706500000000000000000000000000000000600082015250565b6000612fcc601083612b02565b9150612fd782612f96565b602082019050919050565b60006020820190508181036000830152612ffb81612fbf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061303c826129cc565b9150613047836129cc565b925082820390508181111561305f5761305e612dbd565b5b92915050565b7f4279746573206c656e67746820657863656564732033322e0000000000000000600082015250565b600061309b601883612b02565b91506130a682613065565b602082019050919050565b600060208201905081810360008301526130ca8161308e565b9050919050565b600081905092915050565b60006130e7826126d0565b6130f181856130d1565b93506131018185602086016126ec565b80840191505092915050565b600061311982856130dc565b915061312582846130dc565b91508190509392505050565b60008151905061314081612a00565b92915050565b60006020828403121561315c5761315b6124bc565b5b600061316a84828501613131565b91505092915050565b6000819050919050565b61318e61318982612f03565b613173565b82525050565b60006131a0828461317d565b6020820191508190509291505056fe28282d282d5f282d5f2d295f2d292d292920596f75277665207374657070656420696e746f207468652077726f6e67206e65696768626f72686f6f642070616c2ea2646970667358221220d48a56fb97be505e70324834ecb147e08978bb687770f83c8e7f3406367729d264736f6c63430008140033";

type MockFheOpsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockFheOpsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockFheOps__factory extends ContractFactory {
  constructor(...args: MockFheOpsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockFheOps & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockFheOps__factory {
    return super.connect(runner) as MockFheOps__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockFheOpsInterface {
    return new Interface(_abi) as MockFheOpsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockFheOps {
    return new Contract(address, _abi, runner) as unknown as MockFheOps;
  }
}
