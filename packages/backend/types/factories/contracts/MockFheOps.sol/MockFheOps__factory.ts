/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockFheOps,
  MockFheOpsInterface,
} from "../../../contracts/MockFheOps.sol/MockFheOps";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "add",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "and",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "value",
        type: "bool",
      },
    ],
    name: "boolToBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "uint8",
        name: "toType",
        type: "uint8",
      },
    ],
    name: "cast",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "decrypt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "div",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "eq",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int32",
        name: "",
        type: "int32",
      },
    ],
    name: "getNetworkPublicKey",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "gt",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "gte",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "s",
        type: "string",
      },
    ],
    name: "log",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "lt",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "lte",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "max",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
    ],
    name: "maxValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "min",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "mul",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "ne",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "not",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "or",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        internalType: "int32",
        name: "",
        type: "int32",
      },
    ],
    name: "random",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "rem",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
    ],
    name: "req",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "ctHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "sealOutput",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "controlHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "ifTrueHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "ifFalseHash",
        type: "bytes",
      },
    ],
    name: "select",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "shl",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "shr",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "sub",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "uint8",
        name: "toType",
        type: "uint8",
      },
      {
        internalType: "int32",
        name: "",
        type: "int32",
      },
    ],
    name: "trivialEncrypt",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "uint256ToBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "int32",
        name: "",
        type: "int32",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "xor",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50613224806100206000396000f3fe608060405234801561001057600080fd5b50600436106101ef5760003560e01c8063874b1c101161010f578063b9c7a54b116100a2578063cc2cbeff11610071578063cc2cbeff14610720578063d260d9ab14610750578063eb274b7714610780578063eb376804146107b0576101ef565b8063b9c7a54b14610660578063ba19ac2814610690578063c2d96952146106c0578063c7559da4146106f0576101ef565b8063aa626e8a116100de578063aa626e8a146105a0578063ae104cfd146105d0578063ae42450a14610600578063b8fa104314610630576101ef565b8063874b1c10146104e057806392348b34146105105780639944d12d14610540578063a1848ff314610570576101ef565b80634a5a111711610187578063650de1cf11610156578063650de1cf1461042057806372d456f5146104505780637c4697ab146104805780637d23f1db146104b0576101ef565b80634a5a1117146103605780635211c6791461039057806355e5e6c5146103c05780635e639f19146103f0576101ef565b80631f4cda2f116101c35780631f4cda2f146102b457806321b50ba3146102e457806341304fac146103145780634284f76514610330576101ef565b80622df619146101f45780630b80518e1461022457806313c0c9ae146102545780631b1b484e14610284575b600080fd5b61020e60048036038101906102099190612643565b6107e0565b60405161021b919061274d565b60405180910390f35b61023e60048036038101906102399190612643565b61088c565b60405161024b919061274d565b60405180910390f35b61026e60048036038101906102699190612643565b6109c9565b60405161027b919061274d565b60405180910390f35b61029e600480360381019061029991906127a8565b610a80565b6040516102ab919061274d565b60405180910390f35b6102ce60048036038101906102c99190612643565b610b0c565b6040516102db919061274d565b60405180910390f35b6102fe60048036038101906102f991906127d5565b610bb8565b60405161030b919061274d565b60405180910390f35b61032e600480360381019061032991906128e5565b610c00565b005b61034a60048036038101906103459190612643565b610c17565b604051610357919061274d565b60405180910390f35b61037a6004803603810190610375919061292e565b610cc3565b604051610387919061274d565b60405180910390f35b6103aa60048036038101906103a59190612643565b610d4b565b6040516103b7919061274d565b60405180910390f35b6103da60048036038101906103d5919061299d565b610e88565b6040516103e791906129e3565b60405180910390f35b61040a60048036038101906104059190612643565b611318565b604051610417919061274d565b60405180910390f35b61043a60048036038101906104359190612643565b6113ab565b604051610447919061274d565b60405180910390f35b61046a60048036038101906104659190612643565b611462565b604051610477919061274d565b60405180910390f35b61049a60048036038101906104959190612a2a565b6114f5565b6040516104a791906129e3565b60405180910390f35b6104ca60048036038101906104c59190612a99565b611573565b6040516104d7919061274d565b60405180910390f35b6104fa60048036038101906104f59190612643565b6115ba565b604051610507919061274d565b60405180910390f35b61052a60048036038101906105259190612643565b611670565b604051610537919061274d565b60405180910390f35b61055a60048036038101906105559190612643565b611726565b604051610567919061274d565b60405180910390f35b61058a60048036038101906105859190612643565b611813565b6040516105979190612b4a565b60405180910390f35b6105ba60048036038101906105b59190612bac565b61185a565b6040516105c7919061274d565b60405180910390f35b6105ea60048036038101906105e59190612643565b6118e6565b6040516105f7919061274d565b60405180910390f35b61061a60048036038101906106159190612643565b611979565b604051610627919061274d565b60405180910390f35b61064a60048036038101906106459190612c37565b611a66565b604051610657919061274d565b60405180910390f35b61067a60048036038101906106759190612643565b611c3a565b604051610687919061274d565b60405180910390f35b6106aa60048036038101906106a59190612c64565b611cf0565b6040516106b7919061274d565b60405180910390f35b6106da60048036038101906106d59190612cd3565b611d4a565b6040516106e7919061274d565b60405180910390f35b61070a60048036038101906107059190612d8e565b611e3d565b604051610717919061274d565b60405180910390f35b61073a60048036038101906107359190612643565b611f18565b604051610747919061274d565b60405180910390f35b61076a60048036038101906107659190612a99565b611fc4565b604051610777919061274d565b60405180910390f35b61079a60048036038101906107959190612643565b61204c565b6040516107a7919061274d565b60405180910390f35b6107ca60048036038101906107c59190612643565b612103565b6040516107d7919061274d565b60405180910390f35b60606107f66741db6525aaa4566260c01b6121af565b61080a679d39047d6393150460c01b6121af565b61081e67c89a1b0f0c0881a860c01b6121af565b600061082985610e88565b610832846121b2565b61083b866121b2565b6108459190612dea565b61084f9190612e4d565b9050610865679182a25dbdcc4ef160c01b6121af565b61087967c6e7682a72d6793960c01b6121af565b61088281611e3d565b9150509392505050565b60606108a26750385e6f4ad0597360c01b6121af565b6108b667357509ea63b3a43960c01b6121af565b6108ca67d1dfbefc73555dd960c01b6121af565b60006108d585610e88565b6108de846121b2565b6108e89190612e4d565b6108f186610e88565b6108fa866121b2565b6109049190612e4d565b1015905061091c67e951b987cdac83d160c01b6121af565b610930678dac41a4374a5ffc60c01b6121af565b60011515811515036109815761095067a1474b1d5d96e3d260c01b6121af565b61096467588977989d0d665f60c01b6121af565b6109786753ae64f942a0eb6360c01b6121af565b839150506109c2565b61099567039235966d23ca3860c01b6121af565b6109a9673ae748678ea1c37460c01b6121af565b6109bd6734cceedcebc1c01360c01b6121af565b829150505b9392505050565b60606109df67e664b7b160fa229960c01b6121af565b6109f36780008deaf09fc0a560c01b6121af565b610a07679fa085b53d17af9c60c01b6121af565b6000610a1285610e88565b610a1b846121b2565b610a259190612e4d565b610a2e86610e88565b610a37866121b2565b610a419190612e4d565b14159050610a59675eca71e76ed640d360c01b6121af565b610a6d673d24f7ec03454d0260c01b6121af565b610a7681611a66565b9150509392505050565b6060610a9667053049d27f6496ce60c01b6121af565b610aaa674c553502759e784260c01b6121af565b610abe6756ad15c143c7083460c01b6121af565b60006040518060800160405280604181526020016131ae604191399050610aef67cc5fe4434f4897ac60c01b6121af565b610b03677334520af7295fd260c01b6121af565b80915050919050565b6060610b226736d8f63d7249ffbb60c01b6121af565b610b3667fcb4176384492efa60c01b6121af565b610b4a67080326d444d0226e60c01b6121af565b6000610b5585610e88565b610b5e846121b2565b610b67866121b2565b610b719190612e7e565b610b7b9190612e4d565b9050610b916748677f1705bd870360c01b6121af565b610ba56706c34ca2109acdd560c01b6121af565b610bae81611e3d565b9150509392505050565b6060610bce67885e6582d1424da960c01b6121af565b610be2672da1cd36d4ba1cab60c01b6121af565b610bf6673965fd7415cc045f60c01b6121af565b8290509392505050565b610c14678cff061377ac8c4960c01b6121af565b50565b6060610c2d6777d0f668a5aabe2460c01b6121af565b610c41677a23c40c962d633560c01b6121af565b610c5567951910aaa3757ef460c01b6121af565b6000610c6085610e88565b610c69846121b2565b610c72866121b2565b610c7c9190612eaf565b610c869190612e4d565b9050610c9c674b583ad842644c9860c01b6121af565b610cb0670607e0f7dbdf4c8f60c01b6121af565b610cb981611e3d565b9150509392505050565b6060610cd967fc30845c4bfbfa8560c01b6121af565b610ced675127f362cb6d6b4360c01b6121af565b610d01677c7bad4bdbd44e9b60c01b6121af565b600083610d0d90612f2d565b9050610d23679e68d80b063dc22b60c01b6121af565b610d37679db5e4d50f3ac51160c01b6121af565b610d418184612319565b9150509392505050565b6060610d6167176af624130cec6f60c01b6121af565b610d756772f2480efd57f6ed60c01b6121af565b610d89679df693ff8496532b60c01b6121af565b6000610d9485610e88565b610d9d846121b2565b610da79190612e4d565b610db086610e88565b610db9866121b2565b610dc39190612e4d565b10159050610ddb6713c92985c585665160c01b6121af565b610def67efe2583832fe838c60c01b6121af565b6001151581151503610e4057610e0f671461722d9ea6ba5b60c01b6121af565b610e2367af139f3c72e5a4a860c01b6121af565b610e37678db2fedc00fc4e0360c01b6121af565b82915050610e81565b610e546777ba92521a9e636a60c01b6121af565b610e686707e9e2748be6611160c01b6121af565b610e7c677938ba292ca2434060c01b6121af565b839150505b9392505050565b6000610e9e6735f2b65488de5b7f60c01b6121af565b610eb267896ef8501b60ab1860c01b6121af565b610ec66721a557a3fd00f02860c01b6121af565b6000610edc67245ae8c21eb6e1fe60c01b6121af565b610ef0673b81460dcf6040f360c01b6121af565b60008360ff1603610f3a57610f0f67c79267010d33c40860c01b6121af565b610f236774fdf250ea891e9860c01b6121af565b600160ff8016610f339190612dea565b90506112e7565b610f4e67804a4e693a20bcef60c01b6121af565b610f626721f00258aa177e2f60c01b6121af565b60018360ff1603610fad57610f8167eb2d7601922b3f5b60c01b6121af565b610f956759555ffc34082c5160c01b6121af565b600161ffff8016610fa69190612dea565b90506112e6565b610fc167872211536a901d2260c01b6121af565b610fd567b3e9d995449ba71960c01b6121af565b60028360ff160361102257610ff46761934696320dd2ac60c01b6121af565b61100867e08429e5989c3d5760c01b6121af565b600163ffffffff801661101b9190612dea565b90506112e5565b61103667a3c1ddde452abde360c01b6121af565b61104a6787d5abad316f48fc60c01b6121af565b60038360ff160361109b576110696709018665d06490e760c01b6121af565b61107d67b879f32d9534181b60c01b6121af565b600167ffffffffffffffff80166110949190612dea565b90506112e4565b6110af67d656eafb70e8998d60c01b6121af565b6110c3679baf3b0d4c6f8d6160c01b6121af565b60048360ff160361111c576110e267767672f4c0eadba760c01b6121af565b6110f667267c50b2db649d9b60c01b6121af565b60016fffffffffffffffffffffffffffffffff80166111159190612dea565b90506112e3565b611130673d71056818178be460c01b6121af565b61114467e7d569c48ac1661260c01b6121af565b60058360ff1603611180576111636793c2d5dbd95ae3b160c01b6121af565b61117767417141b732a7bcfa60c01b6121af565b600190506112e2565b61119467807c5101410e327160c01b6121af565b6111a86783c5c8a873f3f34f60c01b6121af565b600c8360ff1603611205576111c767acaf998f92fdc0a260c01b6121af565b6111db674df8cbf3cca7f96260c01b6121af565b600173ffffffffffffffffffffffffffffffffffffffff80166111fe9190612dea565b90506112e1565b61121967e2e3f8086a8c084b60c01b6121af565b61122d6754a13d6c1c5c3bdb60c01b6121af565b600d8360ff16036112695761124c67ceadcc65fbe2340660c01b6121af565b6112606773521a88fcdb9ba760c01b6121af565b600190506112e0565b61127d677ebfaa12130f8af160c01b6121af565b61129167839ab7cf29315ee260c01b6121af565b6112a56789cc3e9211fdd74460c01b6121af565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d790612fe0565b60405180910390fd5b5b5b5b5b5b5b5b6112fb67716ca80c2587dba560c01b6121af565b61130f6755d83357b066ebef60c01b6121af565b80915050919050565b606061132e670d7f64d5bad82d7d60c01b6121af565b611342670876eaa895168d5d60c01b6121af565b61135667e1f85e1b8bfc767360c01b6121af565b60008261136290612f2d565b8461136c90612f2d565b18905061138367a41298a3c86f650760c01b6121af565b61139767afc0dcf40d7ca26960c01b6121af565b6113a18186612319565b9150509392505050565b60606113c1676776aed3b5351cb260c01b6121af565b6113d567276348e2e7b9647560c01b6121af565b6113e967232e83e59b450d7560c01b6121af565b60006113f485610e88565b6113fd846121b2565b6114079190612e4d565b61141086610e88565b611419866121b2565b6114239190612e4d565b1015905061143b67c25127c381ab2b9760c01b6121af565b61144f67c49df628bc1b78f360c01b6121af565b61145881611a66565b9150509392505050565b606061147867606d372ddb33160860c01b6121af565b61148c674595c92f0140698060c01b6121af565b6114a0678268527a45bd700360c01b6121af565b6000826114ac90612f2d565b846114b690612f2d565b1790506114cd67c63266a445bbd74a60c01b6121af565b6114e1676e83b48ea31be8ad60c01b6121af565b6114eb8186612319565b9150509392505050565b600061150b6725fa1288cdcc3c1460c01b6121af565b61151f6730ffd9e98272961b60c01b6121af565b61153367c74e86d395359a9160c01b6121af565b600061153e846121b2565b90506115546766841478c684b43c60c01b6121af565b6115686751f575063bc94d6c60c01b6121af565b809150509392505050565b6060611589679e441d358616917b60c01b6121af565b61159d67ff2b401144807e5860c01b6121af565b6115b16796b922539081e12260c01b6121af565b81905092915050565b60606115d06738680a3ab30b16ef60c01b6121af565b6115e4677e038cebee918f8c60c01b6121af565b6115f867d58992ba93ea21da60c01b6121af565b600061160385610e88565b61160c846121b2565b6116169190612e4d565b61161f86610e88565b611628866121b2565b6116329190612e4d565b11905061164967b4cba2f009c1bd0260c01b6121af565b61165d67dd01d6a79b6d707660c01b6121af565b61166681611a66565b9150509392505050565b606061168667c59cf99681d6f5cb60c01b6121af565b61169a67b036173f0347870960c01b6121af565b6116ae67ade069fe993b208860c01b6121af565b60006116b985610e88565b6116c2846121b2565b6116cc9190612e4d565b6116d586610e88565b6116de866121b2565b6116e89190612e4d565b1490506116ff6783092117ee2a835a60c01b6121af565b61171367cc2a7afc161122c260c01b6121af565b61171c81611a66565b9150509392505050565b606061173c678e8d64783484845660c01b6121af565b611750671c5085c874ac1a4860c01b6121af565b61176467d1c6c472fa849b2660c01b6121af565b600061176f846121b2565b905061178567c5c93e367788930d60c01b6121af565b6117996722f1239774dee93f60c01b6121af565b60006117a4846121b2565b90506117ba67da39e0aceaa6311f60c01b6121af565b6117ce675f39c13bffedf80660c01b6121af565b60008183901c90506117ea67b4e73be74e2b2fc360c01b6121af565b6117fe67f087eb2cd745cf4860c01b6121af565b61180781611e3d565b93505050509392505050565b606061182967dc4a58b9a6d8fe0c60c01b6121af565b61183d67f010678a04c875cd60c01b6121af565b611850665c1e07cae286f560c01b6121af565b8290509392505050565b606061187067d0b22ac396e78b1160c01b6121af565b61188467dd2471b296e0024260c01b6121af565b61189867e825b0c60e5552a760c01b6121af565b6118dd6118a485610e88565b426040516020016118b591906129e3565b6040516020818303038152906040528051906020012060001c6118d89190612e4d565b611e3d565b90509392505050565b60606118fc67f849d7562fafcba060c01b6121af565b61191067573f9be3f968fdcb60c01b6121af565b61192467d05e557e5cf8937560c01b6121af565b60008261193090612f2d565b8461193a90612f2d565b16905061195167a1aaaf3a04fc8a2e60c01b6121af565b6119656771af1c9681edd10860c01b6121af565b61196f8186612319565b9150509392505050565b606061198f67545a89ef9433d9d560c01b6121af565b6119a367f686e1325862d8a560c01b6121af565b6119b7674ee7319c195ecb5060c01b6121af565b60006119c2846121b2565b90506119d867cde60c47f12ac7a360c01b6121af565b6119ec679db1b22690c66b4b60c01b6121af565b60006119f7846121b2565b9050611a0d677cd6fbffdfa2f42d60c01b6121af565b611a216712bf059f5e410edf60c01b6121af565b60008183901b9050611a3d67219566df5b91a51d60c01b6121af565b611a5167a258da8608d9d70a60c01b6121af565b611a5a81611e3d565b93505050509392505050565b6060611a7c679f5aa97a4c592b4f60c01b6121af565b611a90671e45d634a3ae486f60c01b6121af565b611aa467e45bca49e3c1f1b960c01b6121af565b6000600167ffffffffffffffff811115611ac157611ac0612518565b5b6040519080825280601f01601f191660200182016040528015611af35781602001600182028036833780820191505090505b509050611b0a67d0f3880d39369d3660c01b6121af565b611b1e67b44abaa94cdaf95e60c01b6121af565b8215611b9957611b386754dea4b341f9a14360c01b6121af565b611b4c6737ba6903ae23c99f60c01b6121af565b600160f81b81600081518110611b6557611b64613000565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611c09565b611bad6754d8f8ee6e3c0aaa60c01b6121af565b611bc066da65932ce9925d60c01b6121af565b600060f81b81600081518110611bd957611bd8613000565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b611c1d6748060522714ba3a460c01b6121af565b611c316717f1a1c526a8bdb160c01b6121af565b80915050919050565b6060611c506733401f92b84da53660c01b6121af565b611c646770f6b4876227a53d60c01b6121af565b611c78676b232902793fdf2d60c01b6121af565b6000611c8385610e88565b611c8c846121b2565b611c969190612e4d565b611c9f86610e88565b611ca8866121b2565b611cb29190612e4d565b109050611cc9675b6826cf1bfbaaa860c01b6121af565b611cdd67eb696cf3f2ac43a860c01b6121af565b611ce681611a66565b9150509392505050565b6060611d0667c50dc3673936c1c860c01b6121af565b611d1a6723a3cae3067315fe60c01b6121af565b611d2e675f3da3523b64409f60c01b6121af565b611d4184611d3b90612f2d565b84612319565b90509392505050565b6060611d6067c50de39761a8d54e60c01b6121af565b611d7467187f6b06e8e78fbd60c01b6121af565b611d8867afc2841f12c1e3bc60c01b6121af565b6000611d938561237f565b9050611da967b64a57790ce9055d60c01b6121af565b611dbd67672d0b4511bb994860c01b6121af565b8015611df457611dd76723aca5d200d7469a60c01b6121af565b611deb67f34e630a95cec57960c01b6121af565b83915050611e35565b611e0867accd80dc066c437e60c01b6121af565b611e1c6798db59127a8be4f160c01b6121af565b611e3067e60b44604266d76d60c01b6121af565b829150505b949350505050565b6060611e536742db7e1e3aef790160c01b6121af565b611e6767936f4a224579097d60c01b6121af565b611e7b67570e67da2acc624460c01b6121af565b6000602067ffffffffffffffff811115611e9857611e97612518565b5b6040519080825280601f01601f191660200182016040528015611eca5781602001600182028036833780820191505090505b509050611ee16755a2d432bbee592060c01b6121af565b826020820152611efb676306cfeed77d57eb60c01b6121af565b611f0f679cee09cb166d57a760c01b6121af565b80915050919050565b6060611f2e67928a26dc88b1d3a460c01b6121af565b611f42671eddd2ea87825b9c60c01b6121af565b611f566780e09b06d8fe0e0f60c01b6121af565b6000611f6185610e88565b611f6a846121b2565b611f73866121b2565b611f7d919061302f565b611f879190612e4d565b9050611f9d67a4b2c96a66ff010160c01b6121af565b611fb167abc12df7b871ee2f60c01b6121af565b611fba81611e3d565b9150509392505050565b6060611fda676381403a3b711b9d60c01b6121af565b611fee672927a681e7f44fff60c01b6121af565b61200267af14c052616d0b6260c01b6121af565b60008261200e90612f2d565b19905061202567963233debb885e7160c01b6121af565b6120396740d51aa2d4b25bac60c01b6121af565b6120438185612319565b91505092915050565b606061206267e1e559b87110556160c01b6121af565b6120766788de0a12fbea98f060c01b6121af565b61208a67922c120dccd52bae60c01b6121af565b600061209585610e88565b61209e846121b2565b6120a89190612e4d565b6120b186610e88565b6120ba866121b2565b6120c49190612e4d565b111590506120dc6716187d80e90d440a60c01b6121af565b6120f067eea32e75f95a2c4060c01b6121af565b6120f981611a66565b9150509392505050565b6060612119677840504108a42abf60c01b6121af565b61212d677dfbdd04867baae560c01b6121af565b61214167355ca351bf35df7260c01b6121af565b600061214c85610e88565b612155846121b2565b61215e866121b2565b6121689190612e4d565b6121729190612e4d565b9050612188671a6550598676ea9b60c01b6121af565b61219c6716c154af9f0e34d260c01b6121af565b6121a581611e3d565b9150509392505050565b50565b60006121c867d98df3b4bc5b92dc60c01b6121af565b6121dc67de16a4e3620e5a8760c01b6121af565b6121f0670d63daf2a29aacae60c01b6121af565b612204673a18cf3a2345230c60c01b6121af565b602082511115612249576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612240906130af565b60405180910390fd5b61225c66427f01e07bbdf260c01b6121af565b612270676c3c54ffe1818afa60c01b6121af565b612284673f6784422257324360c01b6121af565b81516020612292919061302f565b67ffffffffffffffff8111156122ab576122aa612518565b5b6040519080825280601f01601f1916602001820160405280156122dd5781602001600182028036833780820191505090505b50826040516020016122f092919061310b565b6040516020818303038152906040528060200190518101906123129190613144565b9050919050565b606061232f6736937ad74be0af1660c01b6121af565b61234367e0b56cd0563206c960c01b6121af565b61235767fa4a994cb468452f60c01b6121af565b826040516020016123689190613192565b604051602081830303815290604052905092915050565b6000612395672187cf762fc4101360c01b6121af565b6123a967bf2d1712e9e6c72260c01b6121af565b6123bd67b62ca330dac59d7060c01b6121af565b6123d1673b22cf276fe3d42d60c01b6121af565b602082511115612416576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240d906130af565b60405180910390fd5b61242a679206dba1e85cdaa160c01b6121af565b61243e6722ca459b3d5349d460c01b6121af565b612452675d0d177903eb017660c01b6121af565b60008260008151811061246857612467613000565b5b602001015160f81c60f81b60f81c905061248c67e458a25452d05c8260c01b6121af565b6124a067027eefc040c5e44260c01b6121af565b60008160ff161415915050919050565b6000604051905090565b600080fd5b600080fd5b600060ff82169050919050565b6124da816124c4565b81146124e557600080fd5b50565b6000813590506124f7816124d1565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61255082612507565b810181811067ffffffffffffffff8211171561256f5761256e612518565b5b80604052505050565b60006125826124b0565b905061258e8282612547565b919050565b600067ffffffffffffffff8211156125ae576125ad612518565b5b6125b782612507565b9050602081019050919050565b82818337600083830152505050565b60006125e66125e184612593565b612578565b90508281526020810184848401111561260257612601612502565b5b61260d8482856125c4565b509392505050565b600082601f83011261262a576126296124fd565b5b813561263a8482602086016125d3565b91505092915050565b60008060006060848603121561265c5761265b6124ba565b5b600061266a868287016124e8565b935050602084013567ffffffffffffffff81111561268b5761268a6124bf565b5b61269786828701612615565b925050604084013567ffffffffffffffff8111156126b8576126b76124bf565b5b6126c486828701612615565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156127085780820151818401526020810190506126ed565b60008484015250505050565b600061271f826126ce565b61272981856126d9565b93506127398185602086016126ea565b61274281612507565b840191505092915050565b600060208201905081810360008301526127678184612714565b905092915050565b60008160030b9050919050565b6127858161276f565b811461279057600080fd5b50565b6000813590506127a28161277c565b92915050565b6000602082840312156127be576127bd6124ba565b5b60006127cc84828501612793565b91505092915050565b6000806000606084860312156127ee576127ed6124ba565b5b60006127fc868287016124e8565b935050602084013567ffffffffffffffff81111561281d5761281c6124bf565b5b61282986828701612615565b925050604061283a86828701612793565b9150509250925092565b600067ffffffffffffffff82111561285f5761285e612518565b5b61286882612507565b9050602081019050919050565b600061288861288384612844565b612578565b9050828152602081018484840111156128a4576128a3612502565b5b6128af8482856125c4565b509392505050565b600082601f8301126128cc576128cb6124fd565b5b81356128dc848260208601612875565b91505092915050565b6000602082840312156128fb576128fa6124ba565b5b600082013567ffffffffffffffff811115612919576129186124bf565b5b612925848285016128b7565b91505092915050565b600080600060608486031215612947576129466124ba565b5b6000612955868287016124e8565b935050602084013567ffffffffffffffff811115612976576129756124bf565b5b61298286828701612615565b9250506040612993868287016124e8565b9150509250925092565b6000602082840312156129b3576129b26124ba565b5b60006129c1848285016124e8565b91505092915050565b6000819050919050565b6129dd816129ca565b82525050565b60006020820190506129f860008301846129d4565b92915050565b612a07816129ca565b8114612a1257600080fd5b50565b600081359050612a24816129fe565b92915050565b600080600060608486031215612a4357612a426124ba565b5b6000612a51868287016124e8565b935050602084013567ffffffffffffffff811115612a7257612a716124bf565b5b612a7e86828701612615565b9250506040612a8f86828701612a15565b9150509250925092565b60008060408385031215612ab057612aaf6124ba565b5b6000612abe858286016124e8565b925050602083013567ffffffffffffffff811115612adf57612ade6124bf565b5b612aeb85828601612615565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000612b1c82612af5565b612b268185612b00565b9350612b368185602086016126ea565b612b3f81612507565b840191505092915050565b60006020820190508181036000830152612b648184612b11565b905092915050565b600067ffffffffffffffff82169050919050565b612b8981612b6c565b8114612b9457600080fd5b50565b600081359050612ba681612b80565b92915050565b600080600060608486031215612bc557612bc46124ba565b5b6000612bd3868287016124e8565b9350506020612be486828701612b97565b9250506040612bf586828701612793565b9150509250925092565b60008115159050919050565b612c1481612bff565b8114612c1f57600080fd5b50565b600081359050612c3181612c0b565b92915050565b600060208284031215612c4d57612c4c6124ba565b5b6000612c5b84828501612c22565b91505092915050565b600080600060608486031215612c7d57612c7c6124ba565b5b600084013567ffffffffffffffff811115612c9b57612c9a6124bf565b5b612ca786828701612615565b9350506020612cb8868287016124e8565b9250506040612cc986828701612793565b9150509250925092565b60008060008060808587031215612ced57612cec6124ba565b5b6000612cfb878288016124e8565b945050602085013567ffffffffffffffff811115612d1c57612d1b6124bf565b5b612d2887828801612615565b935050604085013567ffffffffffffffff811115612d4957612d486124bf565b5b612d5587828801612615565b925050606085013567ffffffffffffffff811115612d7657612d756124bf565b5b612d8287828801612615565b91505092959194509250565b600060208284031215612da457612da36124ba565b5b6000612db284828501612a15565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612df5826129ca565b9150612e00836129ca565b9250828201905080821115612e1857612e17612dbb565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612e58826129ca565b9150612e63836129ca565b925082612e7357612e72612e1e565b5b828206905092915050565b6000612e89826129ca565b9150612e94836129ca565b925082612ea457612ea3612e1e565b5b828204905092915050565b6000612eba826129ca565b9150612ec5836129ca565b9250828202612ed3816129ca565b91508282048414831517612eea57612ee9612dbb565b5b5092915050565b6000819050602082019050919050565b6000819050919050565b6000612f178251612f01565b80915050919050565b600082821b905092915050565b6000612f38826126ce565b82612f4284612ef1565b9050612f4d81612f0b565b92506020821015612f8d57612f887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802612f20565b831692505b5050919050565b7f556e737570706f72746564207479706500000000000000000000000000000000600082015250565b6000612fca601083612b00565b9150612fd582612f94565b602082019050919050565b60006020820190508181036000830152612ff981612fbd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061303a826129ca565b9150613045836129ca565b925082820390508181111561305d5761305c612dbb565b5b92915050565b7f4279746573206c656e67746820657863656564732033322e0000000000000000600082015250565b6000613099601883612b00565b91506130a482613063565b602082019050919050565b600060208201905081810360008301526130c88161308c565b9050919050565b600081905092915050565b60006130e5826126ce565b6130ef81856130cf565b93506130ff8185602086016126ea565b80840191505092915050565b600061311782856130da565b915061312382846130da565b91508190509392505050565b60008151905061313e816129fe565b92915050565b60006020828403121561315a576131596124ba565b5b60006131688482850161312f565b91505092915050565b6000819050919050565b61318c61318782612f01565b613171565b82525050565b600061319e828461317b565b6020820191508190509291505056fe28282d282d5f282d5f2d295f2d292d292920596f75277665207374657070656420696e746f207468652077726f6e67206e65696768626f72686f6f642070616c2ea2646970667358221220fdca657f0fe562019d7fdfb9b1ced2ddb59ae326de5c2c94bf13874a8fc9134e64736f6c63430008140033";

type MockFheOpsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockFheOpsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockFheOps__factory extends ContractFactory {
  constructor(...args: MockFheOpsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockFheOps & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockFheOps__factory {
    return super.connect(runner) as MockFheOps__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockFheOpsInterface {
    return new Interface(_abi) as MockFheOpsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockFheOps {
    return new Contract(address, _abi, runner) as unknown as MockFheOps;
  }
}
