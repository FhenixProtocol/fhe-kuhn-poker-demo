/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../../common";
import type {
  MockFheOps,
  MockFheOpsInterface,
} from "../../../../../../@fhenixprotocol/contracts/utils/debug/MockFheOps.sol/MockFheOps";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "add",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "and",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "value",
        type: "bool",
      },
    ],
    name: "boolToBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "uint8",
        name: "toType",
        type: "uint8",
      },
    ],
    name: "cast",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "decrypt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "div",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "eq",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int32",
        name: "",
        type: "int32",
      },
    ],
    name: "getNetworkPublicKey",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "gt",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "gte",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "s",
        type: "string",
      },
    ],
    name: "log",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "lt",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "lte",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "max",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
    ],
    name: "maxValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "min",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "mul",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "ne",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "not",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "or",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        internalType: "int32",
        name: "",
        type: "int32",
      },
    ],
    name: "random",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "rem",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
    ],
    name: "req",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "ctHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "sealOutput",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "controlHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "ifTrueHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "ifFalseHash",
        type: "bytes",
      },
    ],
    name: "select",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "shl",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "shr",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "sub",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "uint8",
        name: "toType",
        type: "uint8",
      },
      {
        internalType: "int32",
        name: "",
        type: "int32",
      },
    ],
    name: "trivialEncrypt",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "uint256ToBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "int32",
        name: "",
        type: "int32",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "utype",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "lhsHash",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhsHash",
        type: "bytes",
      },
    ],
    name: "xor",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type MockFheOpsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockFheOpsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockFheOps__factory extends ContractFactory {
  constructor(...args: MockFheOpsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockFheOps & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockFheOps__factory {
    return super.connect(runner) as MockFheOps__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockFheOpsInterface {
    return new Interface(_abi) as MockFheOpsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockFheOps {
    return new Contract(address, _abi, runner) as unknown as MockFheOps;
  }
}
